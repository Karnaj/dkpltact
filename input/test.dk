nat: plth.Set.

x: plth.El nat.
y: plth.El nat.
1: plth.El nat.


s: plth.function (plth.cons nat plth.nil) nat.

A: plth.El euclid.Point.

BetsS: plth.predicate (plth.cons euclid.Point (plth.cons euclid.Point (plth.cons euclid.Point plth.nil))).

positive: plth.predicate (plth.cons nat plth.nil).
plus: plth.function (plth.cons nat (plth.cons nat plth.nil)) nat.

plus_eq_0: plth.Prf (plth.eq nat (plus 0 x) x).
plus_eq_s: plth.Prf (plth.eq nat (plus (s y) x) (plus y (s x))).


1_positive: plth.Prf (plth.imp plth.true (positive 1)).

test: plth.Prf (plth.forall nat (x: El nat => plth.exists nat (y: El nat => gt y x))).


def plus2 : plth.function (plth.cons nat plth.nil) nat := (x: plth.El nat => s (s x)).

(;
def z: plth.function (plth.cons nat plth.nil) nat := (x:plth.El nat :=> s x).;)